// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id                 Int                 @id @default(autoincrement())
  name               String              @db.VarChar
  slug               String              @unique @db.VarChar
  image_uri          String?             @db.VarChar
  description        String?             @db.VarChar
  parent_id          Int?
  status             Int?                @default(20) @db.SmallInt
  popular            Int?                @default(20) @db.SmallInt
  meta_title         String?             @db.VarChar
  meta_description   String?             @db.VarChar
  created_at         DateTime            @default(now())
  updated_at         DateTime            @updatedAt
  deleted_flg        Boolean             @default(false)
  parent             Category?           @relation("CategoryToCategory", fields: [parent_id], references: [id], onDelete: Cascade)
  children           Category[]          @relation("CategoryToCategory")
  category_brand     CategoryBrand[]
  category_attribute CategoryAttribute[]
  Product            Product[]

  @@index([status, popular, parent_id])
}

model Brand {
  id               Int             @id @default(autoincrement())
  name             String          @db.VarChar
  slug             String          @unique @db.VarChar
  image_uri        String?         @db.VarChar
  description      String?         @db.VarChar
  status           Int?            @default(20) @db.SmallInt
  popular          Int?            @default(20) @db.SmallInt
  meta_title       String?         @db.VarChar
  meta_description String?         @db.VarChar
  created_at       DateTime        @default(now())
  updated_at       DateTime        @updatedAt
  deleted_flg      Boolean         @default(false)
  categories       CategoryBrand[]
  Product          Product[]

  @@index([status, popular])
}

model CategoryBrand {
  category_id Int
  brand_id    Int
  brand       Brand    @relation(fields: [brand_id], references: [id], onDelete: Cascade)
  category    Category @relation(fields: [category_id], references: [id], onDelete: Cascade)

  @@unique([category_id, brand_id])
}

model Attribute {
  id               Int                 @id @default(autoincrement())
  name             String              @db.VarChar
  slug             String              @unique @db.VarChar
  description      String?             @db.VarChar
  status           Int?                @default(20) @db.SmallInt
  created_at       DateTime            @default(now())
  updated_at       DateTime            @updatedAt
  deleted_flg      Boolean             @default(false)
  attributeValues  AttributeValues[]
  categories       CategoryAttribute[]
  ProductAttribute ProductAttribute[]

  @@index([status])
}

model AttributeValues {
  id                     Int                      @id @default(autoincrement())
  value                  String                   @db.VarChar
  attribute_id           Int
  created_at             DateTime                 @default(now())
  updated_at             DateTime                 @updatedAt
  deleted_flg            Boolean                  @default(false)
  attribute              Attribute                @relation(fields: [attribute_id], references: [id], onDelete: Cascade)
  ProductAttributeValues ProductAttributeValues[]
}

model CategoryAttribute {
  category_id  Int
  attribute_id Int
  attribute    Attribute @relation(fields: [attribute_id], references: [id], onDelete: Cascade)
  category     Category  @relation(fields: [category_id], references: [id], onDelete: Cascade)

  @@unique([category_id, attribute_id])
}

model Product {
  id                       Int                   @id @default(autoincrement())
  sku                      String                @db.VarChar
  name                     String                @db.VarChar
  slug                     String                @unique @db.VarChar
  image_uri                String?               @db.VarChar
  short_description        String?               @db.VarChar
  description              String?
  technical_specifications Json?                 @db.Json
  category_id              Int
  brand_id                 Int?
  status                   Int?                  @default(20) @db.SmallInt
  popular                  Int?                  @default(20) @db.SmallInt
  product_type             Int?                  @default(10) @db.SmallInt
  meta_title               String?               @db.VarChar
  meta_description         String?               @db.VarChar
  created_at               DateTime              @default(now())
  updated_at               DateTime              @updatedAt
  deleted_flg              Boolean               @default(false)
  total_rating             Float?
  brand                    Brand?                @relation(fields: [brand_id], references: [id], onDelete: Cascade)
  category                 Category              @relation(fields: [category_id], references: [id], onDelete: Cascade)
  productAttributes        ProductAttribute[]
  relatedProducts          ProductRelated[]      @relation("RelatedProduct")
  upsellProducts           ProductUpSell[]       @relation("UpSellProduct")
  crossSellProducts        ProductCrossSell[]    @relation("CrossSellProduct")
  mainRelatedProducts      ProductRelated[]      @relation("MainRelatedProduct")
  mainUpsellProducts       ProductUpSell[]       @relation("MainUpSellProduct")
  mainCrossSellProducts    ProductCrossSell[]    @relation("MainCrossSellProduct")
  productImage             ProductImage[]
  productComments          ProductComments[]
  CartItem                 CartItem[]
  productVariant           ProductVariant[]
  productVariantPrice      ProductVariantPrice[]
  FlashDealsProduct        FlashDealsProduct[]
  Wishlists                Wishlists[]

  @@index([status, popular, brand_id, category_id])
}

model ProductComments {
  id          Int      @id @default(autoincrement())
  product_id  Int
  user_id     Int
  rating      Float
  content     String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  deleted_flg Boolean  @default(false)
  status      Int?     @default(10) @db.SmallInt
  Product     Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)
  Users       Users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model ProductImage {
  id         Int      @id @default(autoincrement())
  product_id Int
  image_uri  String   @db.VarChar
  index      Int      @db.SmallInt
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  product    Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)
}

model ProductAttribute {
  id                     Int                      @id @default(autoincrement())
  product_id             Int
  attribute_id           Int
  attribute              Attribute                @relation(fields: [attribute_id], references: [id], onDelete: Cascade)
  product                Product                  @relation(fields: [product_id], references: [id], onDelete: Cascade)
  productAttributeValues ProductAttributeValues[]

  @@unique([product_id, attribute_id])
}

model ProductAttributeValues {
  id                   Int              @id @default(autoincrement())
  product_attribute_id Int
  attribute_value_id   Int
  productAttribute     ProductAttribute @relation(fields: [product_attribute_id], references: [id], onDelete: Cascade)
  attributeValues      AttributeValues  @relation(fields: [attribute_value_id], references: [id], onDelete: Cascade)

  @@unique([product_attribute_id, attribute_value_id])
}

model ProductVariant {
  id                  Int                  @id @default(autoincrement())
  product_id          Int
  is_default          Boolean              @default(false) @db.Boolean
  sku                 String               @db.VarChar
  label               String               @db.VarChar
  created_at          DateTime             @default(now())
  updated_at          DateTime             @updatedAt
  product             Product              @relation(fields: [product_id], references: [id], onDelete: Cascade)
  productVariantPrice ProductVariantPrice?
}

model ProductVariantPrice {
  id                  Int             @id @default(autoincrement())
  product_id          Int?
  product_variant_id  Int?            @unique
  quantity            Int?            @default(0) @db.SmallInt
  in_stock            Int?            @default(20) @db.SmallInt
  price               Decimal         @default(0) @db.Decimal(18, 0)
  special_price       Decimal?        @default(0) @db.Decimal(18, 0)
  special_price_type  Int?            @db.SmallInt
  discount_type       Int?            @db.SmallInt
  discount_amount     Decimal?        @default(0) @db.Decimal(18, 0)
  discount_start_date DateTime?
  discount_end_date   DateTime?
  product             Product?        @relation(fields: [product_id], references: [id], onDelete: Cascade)
  productVariant      ProductVariant? @relation(fields: [product_variant_id], references: [id], onDelete: Cascade)
}

model ProductRelated {
  related_product_id Int
  product_id         Int
  mainRelatedProduct Product @relation("MainRelatedProduct", fields: [product_id], references: [id], onDelete: Cascade)
  relatedProduct     Product @relation("RelatedProduct", fields: [related_product_id], references: [id], onDelete: Cascade)

  @@unique([related_product_id, product_id])
}

model ProductUpSell {
  up_sell_product_id Int
  product_id         Int
  mainUpSellProduct  Product @relation("MainUpSellProduct", fields: [product_id], references: [id], onDelete: Cascade)
  upSellProduct      Product @relation("UpSellProduct", fields: [up_sell_product_id], references: [id], onDelete: Cascade)

  @@unique([up_sell_product_id, product_id])
}

model ProductCrossSell {
  cross_sell_product_id Int
  product_id            Int
  mainCrossSellProduct  Product @relation("MainCrossSellProduct", fields: [product_id], references: [id], onDelete: Cascade)
  crossSellProduct      Product @relation("CrossSellProduct", fields: [cross_sell_product_id], references: [id], onDelete: Cascade)

  @@unique([cross_sell_product_id, product_id])
}

model FlashDeals {
  id                Int                 @id @default(autoincrement())
  campaign_name     String              @db.VarChar
  start_date        DateTime
  end_date          DateTime
  status            Int?                @default(20) @db.SmallInt
  popular           Int?                @default(20) @db.SmallInt
  created_at        DateTime            @default(now())
  updated_at        DateTime            @updatedAt
  flashDealsProduct FlashDealsProduct[]
}

model FlashDealsProduct {
  flash_deal_id   Int
  product_id      Int
  discount_type   Int        @db.SmallInt
  discount_amount Decimal    @default(0) @db.Decimal(18, 0)
  flashDeals      FlashDeals @relation(fields: [flash_deal_id], references: [id], onDelete: Cascade)
  product         Product    @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@unique([flash_deal_id, product_id])
}

model Users {
  id                           Int               @id @default(autoincrement())
  provider                     String?           @db.VarChar
  provider_id                  String?           @db.VarChar
  name                         String            @db.VarChar
  email                        String            @unique @db.VarChar
  email_verified_at            DateTime?         @default(now())
  verification_code            String?           @db.VarChar
  new_email_verificiation_code String?           @db.VarChar
  password                     String            @db.VarChar
  phone                        String            @db.VarChar
  gender                       Int?              @db.SmallInt
  address                      String?           @db.VarChar
  access_token                 String?           @db.VarChar
  refresh_token                String?           @db.VarChar
  device_token                 String?           @db.VarChar
  remember_token               String?           @db.VarChar
  image_uri                    String?           @db.VarChar
  banned                       Int?              @default(10) @db.SmallInt
  created_at                   DateTime          @default(now())
  updated_at                   DateTime          @updatedAt
  deleted_flg                  Boolean           @default(false)
  ProductComments              ProductComments[]
  CouponUsages                 CouponUsages[]
  Wishlists                    Wishlists[]
}

model Admins {
  id            Int      @id @default(autoincrement())
  name          String   @db.VarChar
  email         String   @db.VarChar
  password      String   @db.VarChar
  phone         String   @db.VarChar
  job           String?  @db.VarChar
  gender        Int?     @db.SmallInt
  address       String?  @db.VarChar
  refresh_token String?  @db.VarChar
  role          Int      @db.SmallInt
  image_uri     String?  @db.VarChar
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  deleted_flg   Boolean  @default(false)

  @@unique([email, phone])
  @@index([role, gender])
}

model Carts {
  id             Int        @id @default(autoincrement())
  user_id        Int        @unique
  discount       Decimal?   @default(0) @db.Decimal(18, 0)
  coupon_code    String?
  coupon_applied Int?       @default(20) @db.SmallInt
  created_at     DateTime   @default(now())
  updated_at     DateTime   @updatedAt
  CartItem       CartItem[]
}

model CartItem {
  id         Int      @id @default(autoincrement())
  cart_id    Int
  product_id Int
  attributes String?
  quantity   Int      @db.SmallInt
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  Carts      Carts    @relation(fields: [cart_id], references: [id], onDelete: Cascade)
  Product    Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@unique([cart_id, product_id, attributes])
}

model Coupons {
  id                  Int            @id @default(autoincrement())
  code                String
  min_buy             Decimal        @default(0) @db.Decimal(18, 0)
  discount_type       Int            @db.SmallInt
  discount_amount     Decimal        @default(0) @db.Decimal(18, 0)
  discount_start_date DateTime
  discount_end_date   DateTime
  created_at          DateTime       @default(now())
  updated_at          DateTime       @updatedAt
  CouponUsages        CouponUsages[]
}

model CouponUsages {
  user_id   Int
  coupon_id Int
  users     Users   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  coupons   Coupons @relation(fields: [coupon_id], references: [id], onDelete: Cascade)

  @@unique([user_id, coupon_id])
}

model WebsiteSetup {
  id         Int      @id @default(autoincrement())
  slug       String   @unique @db.VarChar
  value      String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Wishlists {
  id         Int      @id @default(autoincrement())
  user_id    Int
  product_id Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  users      Users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@unique([user_id, product_id])
}

model Pages {
  id               Int      @id @default(autoincrement())
  name             String   @db.VarChar
  slug             String   @unique @db.VarChar
  content          String
  status           Int?     @default(20) @db.SmallInt
  meta_title       String?  @db.VarChar
  meta_description String?  @db.VarChar
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
}
